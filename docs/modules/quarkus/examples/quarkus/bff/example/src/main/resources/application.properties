# tag::authentication[]
# AUTHENTICATION
quarkus.http.auth.permission.health.paths=/q/*
quarkus.http.auth.permission.health.policy=permit
quarkus.http.auth.permission.default.paths=/*
quarkus.http.auth.permission.default.policy=authenticated
# end::authentication[]

onecx.permissions.application-id=${quarkus.application.name}
# propagate the apm-principal-token from requests we receive
org.eclipse.microprofile.rest.client.propagateHeaders=apm-principal-token

# PROD
%prod.quarkus.rest-client.onecx_theme_svc.url=http://onecx-theme-svc:8080
# BUILD
# workaround for this example
quarkus.openapi-generator.codegen.input-base-dir=../../svc/example/src/main/openapi

# actual:
# quarkus.openapi-generator.codegen.input-base-dir=target/tmp/openapi

# theme service client
quarkus.openapi-generator.codegen.spec.onecx_theme_internal_openapi_yaml.config-key=onecx_theme_svc
quarkus.openapi-generator.codegen.spec.onecx_theme_internal_openapi_yaml.base-package=gen.org.tkit.onecx.theme.client
quarkus.openapi-generator.codegen.spec.onecx_theme_internal_openapi_yaml.return-response=true
quarkus.openapi-generator.codegen.spec.onecx_theme_internal_openapi_yaml.additional-api-type-annotations=@org.eclipse.microprofile.rest.client.annotation.RegisterClientHeaders;
quarkus.openapi-generator.codegen.spec.onecx_theme_internal_openapi_yaml.additional-model-type-annotations=@io.quarkus.runtime.annotations.RegisterForReflection;
quarkus.openapi-generator.codegen.spec.onecx_theme_internal_openapi_yaml.enable-security-generation=false

# OIDC
%prod.quarkus.oidc-client.client-id=${quarkus.application.name}
%prod.quarkus.rest-client.onecx_theme_svc.providers=io.quarkus.oidc.client.reactive.filter.OidcClientRequestReactiveFilter
# INTEGRATION TEST
quarkus.test.integration-test-profile=test
# TEST
%test.quarkus.http.test-port=0
%test.tkit.log.json.enabled=false
# tag::mockServerProperties[]
%test.quarkus.mockserver.devservices.config-class-path=true
%test.quarkus.mockserver.devservices.config-file=/mockserver.properties
%test.quarkus.mockserver.devservices.config-dir=/mockserver
%test.quarkus.mockserver.devservices.log=false
%test.quarkus.mockserver.devservices.reuse=true
%test.quarkus.rest-client.onecx_theme_svc.url=${quarkus.mockserver.endpoint}
# end::mockServerProperties[]

%test.quarkus.rest-client.onecx_workspace_svc_v1.url=${quarkus.mockserver.endpoint}
%test.quarkus.rest-client.onecx_image_internal.url=${quarkus.mockserver.endpoint}
%test.tkit.rs.context.token.header-param=apm-principal-token
%test.tkit.rs.context.token.enabled=false
%test.quarkus.rest-client.onecx_theme_svc.providers=io.quarkus.oidc.client.reactive.filter.OidcClientRequestReactiveFilter
%test.tkit.rs.context.tenant-id.mock.claim-org-id=orgId
# tag::permissionProperties[]
%test.quarkus.rest-client.onecx_permission.url=${quarkus.mockserver.endpoint}
%test.quarkus.keycloak.devservices.roles.alice=role-admin
%test.quarkus.keycloak.devservices.roles.bob=role-user
%test.onecx.permissions.product-name=applications
# end::permissionProperties[]

%test.quarkus.oidc-client.auth-server-url=${quarkus.oidc.auth-server-url}
%test.quarkus.oidc-client.client-id=${quarkus.oidc.client-id}
%test.quarkus.oidc-client.credentials.secret=${quarkus.oidc.credentials.secret}
# PIPE CONFIG


